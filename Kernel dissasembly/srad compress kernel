ShaderType = IL_SHADER_COMPUTE
TargetChip = t
; ------------- SC_SRCSHADER Dump ------------------
SC_SHADERSTATE: u32NumIntVSConst = 0
SC_SHADERSTATE: u32NumIntPSConst = 0
SC_SHADERSTATE: u32NumIntGSConst = 0
SC_SHADERSTATE: u32NumBoolVSConst = 0
SC_SHADERSTATE: u32NumBoolPSConst = 0
SC_SHADERSTATE: u32NumBoolGSConst = 0
SC_SHADERSTATE: u32NumFloatVSConst = 0
SC_SHADERSTATE: u32NumFloatPSConst = 0
SC_SHADERSTATE: u32NumFloatGSConst = 0
u32SCOptions[0] = 0x00680000 SCOption_IGNORE_SAMPLE_L_BUG SCOption_FLOAT_DO_NOT_DIST SCOption_FLOAT_DO_NOT_REASSOC
u32SCOptions[1] = 0x40000000 SCOption_R800_UAV_NONARRAY_FIXUP
u32SCOptions[2] = 0x08200000 SCOption_R1000_BYTE_SHORT_WRITE_WORKAROUND_BUG317611 SCOption_R1000_READLANE_SMRD_WORKAROUND_BUG343479
u32SCOptions[3] = 0x01000204 SCOption_R1000_BARRIER_WORKAROUND_BUG405404 SCOption_R1000R1100_VCCZ_CLOBBER_WORKAROUND_BUG457939 SCOption_SELECTIVE_INLINE
; -------- Disassembly --------------------
shader main
  asic(SI)
  type(CS)

  s_buffer_load_dword  s0, s[4:7], 0x20                     // 00000000: C2000520
  s_buffer_load_dword  s1, s[4:7], 0x1c                     // 00000004: C200851C
  s_buffer_load_dwordx2  s[4:5], s[8:11], 0x00              // 00000008: C2420900
  s_buffer_load_dword  s6, s[8:11], 0x04                    // 0000000C: C2030904
  s_waitcnt     lgkmcnt(0)                                  // 00000010: BF8C007F
  s_add_i32     s1, s12, s1                                 // 00000014: 8101010C
  s_lshl_b32    s1, s1, 6                                   // 00000018: 8F018601
  v_add_i32     v1, vcc, s1, v0                             // 0000001C: 4A020001
  v_ashrrev_i32  v2, 31, v1                                 // 00000020: 3004029F
  v_cmp_gt_i64  vcc, s[4:5], v[1:2]                         // 00000024: 7D480204
  s_and_saveexec_b64  s[4:5], vcc                           // 00000028: BE84246A
  s_cbranch_execz  label_0077                               // 0000002C: BF88006B
  s_load_dwordx4  s[8:11], s[2:3], 0x60                     // 00000030: C0840360
  s_load_dwordx4  s[12:15], s[2:3], 0x50                    // 00000034: C0860350
  v_lshlrev_b32  v0, 2, v1                                  // 00000038: 34000282
  v_add_i32     v0, vcc, s6, v0                             // 0000003C: 4A000006
  s_mov_b32     s1, 0x3eaaaaab                              // 00000040: BE8103FF 3EAAAAAB
  s_mov_b32     s2, 0x3805fdf4                              // 00000048: BE8203FF 3805FDF4
  v_mov_b32     v1, 0x3daaaaab                              // 00000050: 7E0202FF 3DAAAAAB
  s_mov_b32     s3, 0x3c4ccccd                              // 00000058: BE8303FF 3C4CCCCD
  s_mov_b32     s4, 0x3d800000                              // 00000060: BE8403FF 3D800000
  s_mov_b32     s5, 0x7f7fffff                              // 00000068: BE8503FF 7F7FFFFF
  v_mov_b32     v2, 0x7fc00000                              // 00000070: 7E0402FF 7FC00000
  v_mov_b32     v3, 0xff800000                              // 00000078: 7E0602FF FF800000
  s_waitcnt     lgkmcnt(0)                                  // 00000080: BF8C007F
  tbuffer_load_format_x  v4, v0, s[8:11], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000084: EBA01000 80020400
  s_waitcnt     vmcnt(0)                                    // 0000008C: BF8C0F70
  v_lshrrev_b32  v5, 23, v4                                 // 00000090: 2C0A0897
  v_cmp_eq_i32  s[6:7], v5, 0                               // 00000094: D1040006 00010105
  v_or_b32      v6, 1.0, v4                                 // 0000009C: 380C08F2
  v_add_f32     v6, -1.0, v6                                // 000000A0: 060C0CF3
  v_cndmask_b32  v7, v4, v6, s[6:7]                         // 000000A4: D2000007 001A0D04
  v_and_b32     v8, 0x007f0000, v7                          // 000000AC: 36100EFF 007F0000
  v_lshlrev_b32  v9, 1, v7                                  // 000000B4: 34120E81
  v_and_b32     v9, 0x00010000, v9                          // 000000B8: 361212FF 00010000
  v_add_i32     v8, vcc, v8, v9                             // 000000C0: 4A101308
  v_or_b32      v9, 0.5, v8                                 // 000000C4: 381210F0
  v_and_b32     v7, 0x007fffff, v7                          // 000000C8: 360E0EFF 007FFFFF
  v_or_b32      v7, 0.5, v7                                 // 000000D0: 380E0EF0
  v_sub_f32     v7, v9, v7                                  // 000000D4: 080E0F09
  v_lshrrev_b32  v9, 16, v8                                 // 000000D8: 2C121090
  v_lshlrev_b32  v9, 2, v9                                  // 000000DC: 34121282
  v_add_i32     v9, vcc, s0, v9                             // 000000E0: 4A121200
  v_add_i32     v5, vcc, 0xffffff81, v5                     // 000000E4: 4A0A0AFF FFFFFF81
  v_lshrrev_b32  v6, 23, v6                                 // 000000EC: 2C0C0C97
  v_add_i32     v6, vcc, 0xffffff03, v6                     // 000000F0: 4A0C0CFF FFFFFF03
  v_cndmask_b32  v5, v5, v6, s[6:7]                         // 000000F8: D2000005 001A0D05
  v_cvt_f32_i32  v5, v5                                     // 00000100: 7E0A0B05
  v_lshrrev_b32  v6, 16, v8                                 // 00000104: 2C0C1090
  v_lshlrev_b32  v6, 3, v6                                  // 00000108: 340C0C83
  v_add_i32     v6, vcc, s0, v6                             // 0000010C: 4A0C0C00
  v_add_f32     v8, -1.0, v4                                // 00000110: 061008F3
  v_add_f32     v10, 2.0, v8                                // 00000114: 061410F4
  v_rcp_f32     v10, v10                                    // 00000118: 7E14550A
  v_mul_f32     v11, v8, v10                                // 0000011C: 10161508
  v_mad_f32     v10, v8, v10, v11                           // 00000120: D282000A 042E1508
  v_mul_f32     v12, v10, v10                               // 00000128: 1018150A
  v_mac_f32     v1, s3, v12                                 // 0000012C: 3E021803
  v_mul_f32     v1, v12, v1                                 // 00000130: 1002030C
  v_mul_f32     v11, v8, v11                                // 00000134: 10161708
  v_mad_f32     v11, v10, v1, -v11                          // 00000138: D282000B 842E030A
  v_add_f32     v1, v8, v11                                 // 00000140: 06021708
  v_cmp_gt_f32  s[6:7], s4, abs(v8)                         // 00000144: D0080206 00021004
  v_and_b32     v8, 0x7fffffff, v4                          // 0000014C: 361008FF 7FFFFFFF
  v_cmp_gt_u32  s[4:5], v8, s5                              // 00000154: D1880004 00000B08
  v_cmp_eq_i32  vcc, v4, v8                                 // 0000015C: 7D041104
  v_cmp_eq_i32  s[16:17], v8, 0                             // 00000160: D1040010 00010108
  tbuffer_load_format_x  v8, v9, s[12:15], 0 offen offset:1040 format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000168: EBA01410 80030809
  tbuffer_load_format_xy  v[9:10], v6, s[12:15], 0 offen format:[BUF_DATA_FORMAT_32_32,BUF_NUM_FORMAT_FLOAT] // 00000170: EBD91000 80030906
  s_waitcnt     vmcnt(1)                                    // 00000178: BF8C0F71
  v_mul_f32     v6, v7, v8                                  // 0000017C: 100C1107
  v_mul_f32     v11, v6, v6                                 // 00000180: 10160D06
  v_mad_f32     v6, v6, s1, 0.5                             // 00000184: D2820006 03C00306
  v_mul_f32     v6, v11, v6                                 // 0000018C: 100C0D0B
  v_mac_f32     v6, v7, v8                                  // 00000190: 3E0C1107
  v_mad_f32     v6, v5, s2, -v6                             // 00000194: D2820006 84180505
  s_waitcnt     vmcnt(0)                                    // 0000019C: BF8C0F70
  v_add_f32     v6, v6, v10                                 // 000001A0: 060C1506
  v_madmk_f32   v5, v5, 0x3f317000, v9                      // 000001A4: 400A1305 3F317000
  v_add_f32     v5, v6, v5                                  // 000001AC: 060A0B06
  v_cndmask_b32  v1, v5, v1, s[6:7]                         // 000001B0: D2000001 001A0305
  v_cndmask_b32  v1, v1, v4, s[4:5]                         // 000001B8: D2000001 00120901
  v_mul_f32     v1, 0x437f0000, v1                          // 000001C0: 100202FF 437F0000
  v_cndmask_b32  v1, v2, v1, vcc                            // 000001C8: 00020302
  v_cndmask_b32  v1, v1, v3, s[16:17]                       // 000001CC: D2000001 00420701
  tbuffer_store_format_x  v1, v0, s[8:11], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 000001D4: EBA41000 80020100
label_0077:
  s_endpgm                                                  // 000001DC: BF810000
end

; ----------------- CS Data ------------------------

codeLenInByte        = 480 bytes;

userElementCount     = 3;
;  userElements[0]      = PTR_UAV_TABLE, Element=1 dwords, s[2:3]
;  userElements[1]      = IMM_CONST_BUFFER 0, s[4:7]
;  userElements[2]      = IMM_CONST_BUFFER 1, s[8:11]
extUserElementCount  = 0;
NumVgprs             = 13;
NumSgprs             = 18;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s0;
; texSamplerUsage         = 0x00000000
; constBufUsage           = 0x00000000

;COMPUTE_PGM_RSRC2       = 0x00000098
COMPUTE_PGM_RSRC2:USER_SGPR      = 12
COMPUTE_PGM_RSRC2:TGID_X_EN      = 1
NumThreadX                       = 256

