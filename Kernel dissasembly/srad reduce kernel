ShaderType = IL_SHADER_COMPUTE
TargetChip = t
; ------------- SC_SRCSHADER Dump ------------------
SC_SHADERSTATE: u32NumIntVSConst = 0
SC_SHADERSTATE: u32NumIntPSConst = 0
SC_SHADERSTATE: u32NumIntGSConst = 0
SC_SHADERSTATE: u32NumBoolVSConst = 0
SC_SHADERSTATE: u32NumBoolPSConst = 0
SC_SHADERSTATE: u32NumBoolGSConst = 0
SC_SHADERSTATE: u32NumFloatVSConst = 0
SC_SHADERSTATE: u32NumFloatPSConst = 0
SC_SHADERSTATE: u32NumFloatGSConst = 0
u32SCOptions[0] = 0x00680000 SCOption_IGNORE_SAMPLE_L_BUG SCOption_FLOAT_DO_NOT_DIST SCOption_FLOAT_DO_NOT_REASSOC
u32SCOptions[1] = 0x40000000 SCOption_R800_UAV_NONARRAY_FIXUP
u32SCOptions[2] = 0x08200000 SCOption_R1000_BYTE_SHORT_WRITE_WORKAROUND_BUG317611 SCOption_R1000_READLANE_SMRD_WORKAROUND_BUG343479
u32SCOptions[3] = 0x01000204 SCOption_R1000_BARRIER_WORKAROUND_BUG405404 SCOption_R1000R1100_VCCZ_CLOBBER_WORKAROUND_BUG457939 SCOption_SELECTIVE_INLINE
; -------- Disassembly --------------------
shader main
  asic(SI)
  type(CS)

  s_mov_b32     m0, 0x00008000                              // 00000000: BEFC03FF 00008000
  s_buffer_load_dword  s0, s[4:7], 0x1c                     // 00000008: C200051C
  s_buffer_load_dwordx2  s[4:5], s[8:11], 0x04              // 0000000C: C2420904
  s_buffer_load_dword  s1, s[8:11], 0x14                    // 00000010: C2008914
  s_waitcnt     lgkmcnt(0)                                  // 00000014: BF8C007F
  s_add_i32     s0, s12, s0                                 // 00000018: 8100000C
  s_lshl_b32    s6, s0, 6                                   // 0000001C: 8F068600
  v_add_i32     v4, vcc, s6, v0                             // 00000020: 4A080006
  v_ashrrev_i32  v5, 31, v4                                 // 00000024: 300A089F
  s_lshl_b32    s7, s1, 6                                   // 00000028: 8F078601
  s_add_i32     s12, s4, 64                                 // 0000002C: 810CC004
  s_buffer_load_dword  s13, s[8:11], 0x08                   // 00000030: C2068908
  s_buffer_load_dword  s14, s[8:11], 0x0c                   // 00000034: C207090C
  s_buffer_load_dword  s8, s[8:11], 0x10                    // 00000038: C2040910
  v_lshlrev_b32  v3, 2, v0                                  // 0000003C: 34060082
  s_sub_i32     s7, s12, s7                                 // 00000040: 8187070C
  v_cmp_lt_i64  s[4:5], v[4:5], s[4:5]                      // 00000044: D1420004 00000904
  s_load_dwordx4  s[16:19], s[2:3], 0x60                    // 0000004C: C0880360
  s_load_dwordx4  s[20:23], s[2:3], 0x68                    // 00000050: C08A0368
  s_and_saveexec_b64  s[2:3], s[4:5]                        // 00000054: BE822404
  s_waitcnt     lgkmcnt(0)                                  // 00000058: BF8C007F
  v_mul_lo_i32  v1, v4, s13                                 // 0000005C: D2D60001 00001B04
  s_cbranch_execz  label_0024                               // 00000064: BF88000A
  v_lshlrev_b32  v1, 2, v1                                  // 00000068: 34020282
  v_add_i32     v2, vcc, s14, v1                            // 0000006C: 4A04020E
  v_add_i32     v1, vcc, s8, v1                             // 00000070: 4A020208
  tbuffer_load_format_x  v2, v2, s[16:19], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000074: EBA01000 80040202
  tbuffer_load_format_x  v1, v1, s[20:23], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 0000007C: EBA01000 80050101
  s_waitcnt     vmcnt(0)                                    // 00000084: BF8C0F70
  ds_write2_b32  v3, v2, v1 offset1:64                      // 00000088: D8384000 00010203
label_0024:
  s_mov_b64     exec, s[2:3]                                // 00000090: BEFE0402
  s_cmp_eq_i32  s7, 64                                      // 00000094: BF00C007
  s_cbranch_scc1  label_01C6                                // 00000098: BF85019F
  s_add_i32     s1, -1, s1                                  // 0000009C: 810101C1
  s_cmp_eq_i32  s0, s1                                      // 000000A0: BF000100
  s_cbranch_scc0  label_00C2                                // 000000A4: BF840098
  s_cmp_lt_i32  s7, 2                                       // 000000A8: BF048207
  s_cselect_b32  s1, 0, 2                                   // 000000AC: 85018280
  s_cmp_lt_i32  s7, 4                                       // 000000B0: BF048407
  s_cselect_b32  s1, s1, 4                                  // 000000B4: 85018401
  s_cmp_lt_i32  s7, 8                                       // 000000B8: BF048807
  s_cselect_b32  s1, s1, 8                                  // 000000BC: 85018801
  s_cmp_lt_i32  s7, 16                                      // 000000C0: BF049007
  s_cselect_b32  s1, s1, 16                                 // 000000C4: 85019001
  s_cmp_lt_i32  s7, 32                                      // 000000C8: BF04A007
  s_cselect_b32  s1, s1, 32                                 // 000000CC: 8501A001
  s_cmp_lt_i32  s7, 64                                      // 000000D0: BF04C007
  s_cselect_b32  s1, s1, 64                                 // 000000D4: 8501C001
  s_cmp_ge_u32  s1, 2                                       // 000000D8: BF098201
  s_cbranch_scc0  label_0091                                // 000000DC: BF840059
  v_add_i32     v1, vcc, 1, v0                              // 000000E0: 4A020081
  s_movk_i32    s2, 0x0002                                  // 000000E4: B0020002
label_003A:
  s_sub_i32     s3, 0, s2                                   // 000000E8: 81830280
  s_max_i32     s3, s2, s3                                  // 000000EC: 84030302
  v_cvt_f32_u32  v2, s3                                     // 000000F0: 7E040C03
  v_rcp_f32     v2, v2                                      // 000000F4: 7E045502
  v_mul_f32     v2, 0x4f800000, v2                          // 000000F8: 100404FF 4F800000
  v_cvt_u32_f32  v2, v2                                     // 00000100: 7E040F02
  v_mul_lo_u32  v4, s3, v2                                  // 00000104: D2D20004 00020403
  v_mul_hi_u32  v5, s3, v2                                  // 0000010C: D2D40005 00020403
  v_sub_i32     v6, vcc, 0, v4                              // 00000114: 4C0C0880
  v_cmp_ne_i32  s[4:5], 0, v5                               // 00000118: D10A0004 00020A80
  v_cndmask_b32  v4, v6, v4, s[4:5]                         // 00000120: D2000004 00120906
  v_mul_hi_u32  v4, v4, v2                                  // 00000128: D2D40004 00020504
  v_sub_i32     v5, vcc, 0, v1                              // 00000130: 4C0A0280
  v_sub_i32     v6, vcc, v2, v4                             // 00000134: 4C0C0902
  v_add_i32     v2, vcc, v2, v4                             // 00000138: 4A040902
  v_max_i32     v4, v1, v5                                  // 0000013C: 24080B01
  v_cndmask_b32  v2, v2, v6, s[4:5]                         // 00000140: D2000002 00120D02
  v_mul_hi_u32  v2, v2, v4                                  // 00000148: D2D40002 00020902
  v_mul_lo_u32  v5, v2, s3                                  // 00000150: D2D20005 00000702
  v_sub_i32     v6, vcc, v4, v5                             // 00000158: 4C0C0B04
  v_cmp_ge_u32  s[4:5], v4, v5                              // 0000015C: D18C0004 00020B04
  v_cmp_ge_u32  s[10:11], v6, s3                            // 00000164: D18C000A 00000706
  v_add_i32     v4, vcc, 1, v2                              // 0000016C: 4A080481
  s_and_b64     s[10:11], s[4:5], s[10:11]                  // 00000170: 878A0A04
  v_add_i32     v5, vcc, -1, v2                             // 00000174: 4A0A04C1
  v_cndmask_b32  v2, v2, v4, s[10:11]                       // 00000178: D2000002 002A0902
  v_cndmask_b32  v2, v5, v2, s[4:5]                         // 00000180: D2000002 00120505
  v_cmp_ne_i32  vcc, 0, s3                                  // 00000188: D10A006A 00000680
  v_cmp_lt_i32  s[4:5], s2, 0                               // 00000190: D1020004 00010002
  v_cmp_lt_i32  s[10:11], v1, 0                             // 00000198: D102000A 00010101
  v_cndmask_b32  v2, -1, v2, vcc                            // 000001A0: 000404C1
  s_xor_b64     s[4:5], s[4:5], s[10:11]                    // 000001A4: 89840A04
  v_sub_i32     v4, vcc, 0, v2                              // 000001A8: 4C080480
  v_cndmask_b32  v2, v2, v4, s[4:5]                         // 000001AC: D2000002 00120902
  v_mul_lo_i32  v2, v2, s2                                  // 000001B4: D2D60002 00000502
  v_sub_i32     v2, vcc, v1, v2                             // 000001BC: 4C040501
  v_cmp_eq_i32  s[4:5], v2, 0                               // 000001C0: D1040004 00010102
  v_cmp_gt_i32  vcc, s1, v0                                 // 000001C8: 7D080001
  s_and_b64     vcc, s[4:5], vcc                            // 000001CC: 87EA6A04
  s_and_saveexec_b64  s[4:5], vcc                           // 000001D0: BE84246A
  s_cbranch_execz  label_008B                               // 000001D4: BF880015
  s_lshr_b32    s3, s2, 31                                  // 000001D8: 90039F02
  s_add_i32     s3, s2, s3                                  // 000001DC: 81030302
  s_lshr_b32    s3, s3, 1                                   // 000001E0: 90038103
  v_subrev_i32  v2, vcc, s3, v0                             // 000001E4: 4E040003
  ds_read2_b32  v[4:5], v3 offset1:64                       // 000001E8: D8DC4000 04000003
  v_lshlrev_b32  v2, 2, v2                                  // 000001F0: 34040482
  ds_read_b32   v6, v2                                      // 000001F4: D8D80000 06000002
  v_add_i32     v2, vcc, 0x00000100, v2                     // 000001FC: 4A0404FF 00000100
  s_waitcnt     lgkmcnt(0)                                  // 00000204: BF8C007F
  v_add_f32     v4, v4, v6                                  // 00000208: 06080D04
  ds_write_b32  v3, v4                                      // 0000020C: D8340000 00000403
  ds_read_b32   v2, v2                                      // 00000214: D8D80000 02000002
  s_waitcnt     lgkmcnt(0)                                  // 0000021C: BF8C007F
  v_add_f32     v2, v2, v5                                  // 00000220: 06040B02
  ds_write_b32  v3, v2 offset:256                           // 00000224: D8340100 00000203
label_008B:
  s_mov_b64     exec, s[4:5]                                // 0000022C: BEFE0404
  s_lshl_b32    s2, s2, 1                                   // 00000230: 8F028102
  s_waitcnt     lgkmcnt(0)                                  // 00000234: BF8C007F
  s_barrier                                                 // 00000238: BF8A0000
  s_cmp_gt_i32  s2, s1                                      // 0000023C: BF020102
  s_cbranch_scc0  label_003A                                // 00000240: BF84FFA9
label_0091:
  s_add_i32     s2, -1, s1                                  // 00000244: 810201C1
  v_cmp_eq_i32  vcc, s2, v0                                 // 00000248: 7D040002
  s_and_saveexec_b64  s[2:3], vcc                           // 0000024C: BE82246A
  s_cbranch_execz  label_02C9                               // 00000250: BF880234
  s_add_i32     s2, s7, s6                                  // 00000254: 81020607
  s_add_i32     s1, s6, s1                                  // 00000258: 81010106
  s_cmp_gt_i32  s2, s1                                      // 0000025C: BF020102
  s_cbranch_scc0  label_00B1                                // 00000260: BF840018
  ds_read2_b32  v[6:7], v3 offset0:64                       // 00000264: D8DC0040 06000003
  s_mov_b64     s[4:5], exec                                // 0000026C: BE84047E
  v_mov_b32     v1, s1                                      // 00000270: 7E020201
label_009D:
  v_lshlrev_b32  v4, 2, v1                                  // 00000274: 34080282
  v_add_i32     v5, vcc, s14, v4                            // 00000278: 4A0A080E
  v_add_i32     v4, vcc, s8, v4                             // 0000027C: 4A080808
  v_add_i32     v1, vcc, 1, v1                              // 00000280: 4A020281
  v_cmp_gt_i32  vcc, s2, v1                                 // 00000284: 7D080202
  tbuffer_load_format_x  v5, v5, s[16:19], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000288: EBA01000 80040505
  tbuffer_load_format_x  v4, v4, s[20:23], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000290: EBA01000 80050404
  s_waitcnt     vmcnt(1) & lgkmcnt(0)                       // 00000298: BF8C0071
  v_add_f32     v7, v7, v5                                  // 0000029C: 060E0B07
  s_waitcnt     vmcnt(0)                                    // 000002A0: BF8C0F70
  v_add_f32     v6, v6, v4                                  // 000002A4: 060C0906
  ds_write2_b32  v3, v7, v6 offset1:64                      // 000002A8: D8384000 00060703
  s_and_b64     exec, exec, vcc                             // 000002B0: 87FE6A7E
  s_cbranch_execz  label_00AF                               // 000002B4: BF880001
  s_branch      label_009D                                  // 000002B8: BF82FFEE
label_00AF:
  s_mov_b64     exec, s[4:5]                                // 000002BC: BEFE0404
  s_branch      label_00B3                                  // 000002C0: BF820002
label_00B1:
  ds_read_b32   v7, v3                                      // 000002C4: D8D80000 07000003
label_00B3:
  ds_read_b32   v1, v3 offset:256                           // 000002CC: D8D80100 01000003
  s_mul_i32     s0, s13, s0                                 // 000002D4: 9300000D
  s_lshl_b32    s0, s0, 8                                   // 000002D8: 8F008800
  s_add_i32     s1, s14, s0                                 // 000002DC: 8101000E
  v_mov_b32     v2, s1                                      // 000002E0: 7E040201
  s_add_i32     s0, s8, s0                                  // 000002E4: 81000008
  s_waitcnt     lgkmcnt(1)                                  // 000002E8: BF8C017F
  tbuffer_store_format_x  v7, v2, s[16:19], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 000002EC: EBA41000 80040702
  v_mov_b32     v0, s0                                      // 000002F4: 7E000200
  s_waitcnt     lgkmcnt(0)                                  // 000002F8: BF8C007F
  tbuffer_store_format_x  v1, v0, s[20:23], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 000002FC: EBA41000 80050100
  s_branch      label_02C9                                  // 00000304: BF820207
label_00C2:
  v_add_i32     v1, vcc, 1, v0                              // 00000308: 4A020081
  s_movk_i32    s1, 0x0002                                  // 0000030C: B0010002
label_00C4:
  s_sub_i32     s2, 0, s1                                   // 00000310: 81820180
  s_max_i32     s2, s1, s2                                  // 00000314: 84020201
  v_cvt_f32_u32  v2, s2                                     // 00000318: 7E040C02
  v_rcp_f32     v2, v2                                      // 0000031C: 7E045502
  v_mul_f32     v2, 0x4f800000, v2                          // 00000320: 100404FF 4F800000
  v_cvt_u32_f32  v2, v2                                     // 00000328: 7E040F02
  v_mul_lo_u32  v4, s2, v2                                  // 0000032C: D2D20004 00020402
  v_mul_hi_u32  v5, s2, v2                                  // 00000334: D2D40005 00020402
  v_sub_i32     v6, vcc, 0, v4                              // 0000033C: 4C0C0880
  v_cmp_ne_i32  s[4:5], 0, v5                               // 00000340: D10A0004 00020A80
  v_cndmask_b32  v4, v6, v4, s[4:5]                         // 00000348: D2000004 00120906
  v_mul_hi_u32  v4, v4, v2                                  // 00000350: D2D40004 00020504
  v_sub_i32     v5, vcc, 0, v1                              // 00000358: 4C0A0280
  v_sub_i32     v6, vcc, v2, v4                             // 0000035C: 4C0C0902
  v_add_i32     v2, vcc, v2, v4                             // 00000360: 4A040902
  v_max_i32     v4, v1, v5                                  // 00000364: 24080B01
  v_cndmask_b32  v2, v2, v6, s[4:5]                         // 00000368: D2000002 00120D02
  v_mul_hi_u32  v2, v2, v4                                  // 00000370: D2D40002 00020902
  v_mul_lo_u32  v5, v2, s2                                  // 00000378: D2D20005 00000502
  v_sub_i32     v6, vcc, v4, v5                             // 00000380: 4C0C0B04
  v_cmp_ge_u32  s[4:5], v4, v5                              // 00000384: D18C0004 00020B04
  v_cmp_ge_u32  s[6:7], v6, s2                              // 0000038C: D18C0006 00000506
  v_add_i32     v5, vcc, 1, v2                              // 00000394: 4A0A0481
  s_and_b64     s[6:7], s[4:5], s[6:7]                      // 00000398: 87860604
  v_add_i32     v6, vcc, -1, v2                             // 0000039C: 4A0C04C1
  v_cndmask_b32  v2, v2, v5, s[6:7]                         // 000003A0: D2000002 001A0B02
  v_cndmask_b32  v2, v6, v2, s[4:5]                         // 000003A8: D2000002 00120506
  v_cmp_ne_i32  vcc, 0, s2                                  // 000003B0: D10A006A 00000480
  v_cmp_lt_i32  s[2:3], s1, 0                               // 000003B8: D1020002 00010001
  v_cmp_lt_i32  s[4:5], v1, 0                               // 000003C0: D1020004 00010101
  v_cndmask_b32  v2, -1, v2, vcc                            // 000003C8: 000404C1
  s_xor_b64     s[2:3], s[4:5], s[2:3]                      // 000003CC: 89820204
  v_sub_i32     v5, vcc, 0, v2                              // 000003D0: 4C0A0480
  v_cndmask_b32  v2, v2, v5, s[2:3]                         // 000003D4: D2000002 000A0B02
  v_mul_lo_i32  v2, v2, s1                                  // 000003DC: D2D60002 00000302
  v_sub_i32     v2, vcc, v1, v2                             // 000003E4: 4C040501
  v_cmp_eq_i32  vcc, 0, v2                                  // 000003E8: 7D040480
  s_and_saveexec_b64  s[2:3], vcc                           // 000003EC: BE82246A
  s_cbranch_execz  label_0112                               // 000003F0: BF880015
  s_lshr_b32    s6, s1, 31                                  // 000003F4: 90069F01
  s_add_i32     s6, s1, s6                                  // 000003F8: 81060601
  s_lshr_b32    s6, s6, 1                                   // 000003FC: 90068106
  v_subrev_i32  v2, vcc, s6, v0                             // 00000400: 4E040006
  ds_read2_b32  v[5:6], v3 offset1:64                       // 00000404: D8DC4000 05000003
  v_lshlrev_b32  v2, 2, v2                                  // 0000040C: 34040482
  ds_read_b32   v7, v2                                      // 00000410: D8D80000 07000002
  v_add_i32     v2, vcc, 0x00000100, v2                     // 00000418: 4A0404FF 00000100
  s_waitcnt     lgkmcnt(0)                                  // 00000420: BF8C007F
  v_add_f32     v5, v5, v7                                  // 00000424: 060A0F05
  ds_write_b32  v3, v5                                      // 00000428: D8340000 00000503
  ds_read_b32   v2, v2                                      // 00000430: D8D80000 02000002
  s_waitcnt     lgkmcnt(0)                                  // 00000438: BF8C007F
  v_add_f32     v2, v2, v6                                  // 0000043C: 06040D02
  ds_write_b32  v3, v2 offset:256                           // 00000440: D8340100 00000203
label_0112:
  s_mov_b64     exec, s[2:3]                                // 00000448: BEFE0402
  s_lshl_b32    s2, s1, 1                                   // 0000044C: 8F028101
  v_cmp_lt_i32  s[6:7], s2, 0                               // 00000450: D1020006 00010002
  s_sub_i32     s3, 0, s2                                   // 00000458: 81830280
  s_max_i32     s3, s2, s3                                  // 0000045C: 84030302
  v_cvt_f32_u32  v2, s3                                     // 00000460: 7E040C03
  v_rcp_f32     v2, v2                                      // 00000464: 7E045502
  v_mul_f32     v2, 0x4f800000, v2                          // 00000468: 100404FF 4F800000
  v_cvt_u32_f32  v2, v2                                     // 00000470: 7E040F02
  v_mul_lo_u32  v5, s3, v2                                  // 00000474: D2D20005 00020403
  v_mul_hi_u32  v6, s3, v2                                  // 0000047C: D2D40006 00020403
  v_sub_i32     v7, vcc, 0, v5                              // 00000484: 4C0E0A80
  v_cmp_ne_i32  s[10:11], 0, v6                             // 00000488: D10A000A 00020C80
  v_cndmask_b32  v5, v7, v5, s[10:11]                       // 00000490: D2000005 002A0B07
  v_mul_hi_u32  v5, v5, v2                                  // 00000498: D2D40005 00020505
  v_sub_i32     v6, vcc, v2, v5                             // 000004A0: 4C0C0B02
  v_add_i32     v2, vcc, v2, v5                             // 000004A4: 4A040B02
  v_cndmask_b32  v2, v2, v6, s[10:11]                       // 000004A8: D2000002 002A0D02
  v_mul_hi_u32  v2, v2, v4                                  // 000004B0: D2D40002 00020902
  v_mul_lo_u32  v5, v2, s3                                  // 000004B8: D2D20005 00000702
  v_sub_i32     v6, vcc, v4, v5                             // 000004C0: 4C0C0B04
  v_cmp_ge_u32  s[10:11], v4, v5                            // 000004C4: D18C000A 00020B04
  v_add_i32     v5, vcc, 1, v2                              // 000004CC: 4A0A0481
  v_add_i32     v7, vcc, -1, v2                             // 000004D0: 4A0E04C1
  v_cmp_le_u32  vcc, s3, v6                                 // 000004D4: 7D860C03
  s_and_b64     vcc, s[10:11], vcc                          // 000004D8: 87EA6A0A
  v_cndmask_b32  v2, v2, v5, vcc                            // 000004DC: 00040B02
  v_cndmask_b32  v2, v7, v2, s[10:11]                       // 000004E0: D2000002 002A0507
  v_cmp_ne_i32  vcc, 0, s3                                  // 000004E8: D10A006A 00000680
  v_cndmask_b32  v2, -1, v2, vcc                            // 000004F0: 000404C1
  s_xor_b64     s[6:7], s[4:5], s[6:7]                      // 000004F4: 89860604
  v_sub_i32     v5, vcc, 0, v2                              // 000004F8: 4C0A0480
  v_cndmask_b32  v2, v2, v5, s[6:7]                         // 000004FC: D2000002 001A0B02
  v_mul_lo_i32  v2, v2, s2                                  // 00000504: D2D60002 00000502
  v_sub_i32     v2, vcc, v1, v2                             // 0000050C: 4C040501
  v_cmp_eq_i32  vcc, 0, v2                                  // 00000510: 7D040480
  s_waitcnt     lgkmcnt(0)                                  // 00000514: BF8C007F
  s_barrier                                                 // 00000518: BF8A0000
  s_and_saveexec_b64  s[6:7], vcc                           // 0000051C: BE86246A
  s_cbranch_execz  label_015F                               // 00000520: BF880016
  s_bfe_u32     s3, s1, 0x0001001e                          // 00000524: 9383FF01 0001001E
  s_add_i32     s2, s2, s3                                  // 0000052C: 81020302
  s_lshr_b32    s2, s2, 1                                   // 00000530: 90028102
  v_subrev_i32  v2, vcc, s2, v0                             // 00000534: 4E040002
  ds_read2_b32  v[5:6], v3 offset1:64                       // 00000538: D8DC4000 05000003
  v_lshlrev_b32  v2, 2, v2                                  // 00000540: 34040482
  ds_read_b32   v7, v2                                      // 00000544: D8D80000 07000002
  v_add_i32     v2, vcc, 0x00000100, v2                     // 0000054C: 4A0404FF 00000100
  s_waitcnt     lgkmcnt(0)                                  // 00000554: BF8C007F
  v_add_f32     v5, v5, v7                                  // 00000558: 060A0F05
  ds_write_b32  v3, v5                                      // 0000055C: D8340000 00000503
  ds_read_b32   v2, v2                                      // 00000564: D8D80000 02000002
  s_waitcnt     lgkmcnt(0)                                  // 0000056C: BF8C007F
  v_add_f32     v2, v2, v6                                  // 00000570: 06040D02
  ds_write_b32  v3, v2 offset:256                           // 00000574: D8340100 00000203
label_015F:
  s_mov_b64     exec, s[6:7]                                // 0000057C: BEFE0406
  s_lshl_b32    s2, s1, 2                                   // 00000580: 8F028201
  v_cmp_lt_i32  s[6:7], s2, 0                               // 00000584: D1020006 00010002
  s_sub_i32     s3, 0, s2                                   // 0000058C: 81830280
  s_max_i32     s3, s2, s3                                  // 00000590: 84030302
  v_cvt_f32_u32  v2, s3                                     // 00000594: 7E040C03
  v_rcp_f32     v2, v2                                      // 00000598: 7E045502
  v_mul_f32     v2, 0x4f800000, v2                          // 0000059C: 100404FF 4F800000
  v_cvt_u32_f32  v2, v2                                     // 000005A4: 7E040F02
  v_mul_lo_u32  v5, s3, v2                                  // 000005A8: D2D20005 00020403
  v_mul_hi_u32  v6, s3, v2                                  // 000005B0: D2D40006 00020403
  v_sub_i32     v7, vcc, 0, v5                              // 000005B8: 4C0E0A80
  v_cmp_ne_i32  s[10:11], 0, v6                             // 000005BC: D10A000A 00020C80
  v_cndmask_b32  v5, v7, v5, s[10:11]                       // 000005C4: D2000005 002A0B07
  v_mul_hi_u32  v5, v5, v2                                  // 000005CC: D2D40005 00020505
  v_sub_i32     v6, vcc, v2, v5                             // 000005D4: 4C0C0B02
  v_add_i32     v2, vcc, v2, v5                             // 000005D8: 4A040B02
  v_cndmask_b32  v2, v2, v6, s[10:11]                       // 000005DC: D2000002 002A0D02
  v_mul_hi_u32  v2, v2, v4                                  // 000005E4: D2D40002 00020902
  v_mul_lo_u32  v5, v2, s3                                  // 000005EC: D2D20005 00000702
  v_sub_i32     v6, vcc, v4, v5                             // 000005F4: 4C0C0B04
  v_cmp_ge_u32  s[10:11], v4, v5                            // 000005F8: D18C000A 00020B04
  v_add_i32     v4, vcc, 1, v2                              // 00000600: 4A080481
  v_add_i32     v5, vcc, -1, v2                             // 00000604: 4A0A04C1
  v_cmp_le_u32  vcc, s3, v6                                 // 00000608: 7D860C03
  s_and_b64     vcc, s[10:11], vcc                          // 0000060C: 87EA6A0A
  v_cndmask_b32  v2, v2, v4, vcc                            // 00000610: 00040902
  v_cndmask_b32  v2, v5, v2, s[10:11]                       // 00000614: D2000002 002A0505
  v_cmp_ne_i32  vcc, 0, s3                                  // 0000061C: D10A006A 00000680
  v_cndmask_b32  v2, -1, v2, vcc                            // 00000624: 000404C1
  s_xor_b64     s[4:5], s[4:5], s[6:7]                      // 00000628: 89840604
  v_sub_i32     v4, vcc, 0, v2                              // 0000062C: 4C080480
  v_cndmask_b32  v2, v2, v4, s[4:5]                         // 00000630: D2000002 00120902
  v_mul_lo_i32  v2, v2, s2                                  // 00000638: D2D60002 00000502
  v_sub_i32     v2, vcc, v1, v2                             // 00000640: 4C040501
  v_cmp_eq_i32  vcc, 0, v2                                  // 00000644: 7D040480
  s_waitcnt     lgkmcnt(0)                                  // 00000648: BF8C007F
  s_barrier                                                 // 0000064C: BF8A0000
  s_and_saveexec_b64  s[4:5], vcc                           // 00000650: BE84246A
  s_cbranch_execz  label_01AC                               // 00000654: BF880016
  s_bfe_u32     s3, s1, 0x0001001d                          // 00000658: 9383FF01 0001001D
  s_add_i32     s2, s2, s3                                  // 00000660: 81020302
  s_lshr_b32    s2, s2, 1                                   // 00000664: 90028102
  v_subrev_i32  v2, vcc, s2, v0                             // 00000668: 4E040002
  ds_read2_b32  v[4:5], v3 offset1:64                       // 0000066C: D8DC4000 04000003
  v_lshlrev_b32  v2, 2, v2                                  // 00000674: 34040482
  ds_read_b32   v6, v2                                      // 00000678: D8D80000 06000002
  v_add_i32     v2, vcc, 0x00000100, v2                     // 00000680: 4A0404FF 00000100
  s_waitcnt     lgkmcnt(0)                                  // 00000688: BF8C007F
  v_add_f32     v4, v4, v6                                  // 0000068C: 06080D04
  ds_write_b32  v3, v4                                      // 00000690: D8340000 00000403
  ds_read_b32   v2, v2                                      // 00000698: D8D80000 02000002
  s_waitcnt     lgkmcnt(0)                                  // 000006A0: BF8C007F
  v_add_f32     v2, v2, v5                                  // 000006A4: 06040B02
  ds_write_b32  v3, v2 offset:256                           // 000006A8: D8340100 00000203
label_01AC:
  s_mov_b64     exec, s[4:5]                                // 000006B0: BEFE0404
  s_waitcnt     lgkmcnt(0)                                  // 000006B4: BF8C007F
  s_barrier                                                 // 000006B8: BF8A0000
  s_lshl_b32    s1, s1, 3                                   // 000006BC: 8F018301
  s_cmp_ge_i32  s1, 0x00000041                              // 000006C0: BF03FF01 00000041
  s_cbranch_scc0  label_00C4                                // 000006C8: BF84FF11
  v_cmp_eq_i32  vcc, 63, v0                                 // 000006CC: 7D0400BF
  s_and_saveexec_b64  s[2:3], vcc                           // 000006D0: BE82246A
  v_mov_b32     v0, 0                                       // 000006D4: 7E000280
  s_cbranch_execz  label_02C9                               // 000006D8: BF880112
  ds_read2_b32  v[0:1], v0 offset0:63 offset1:127           // 000006DC: D8DC7F3F 00000000
  s_mul_i32     s0, s13, s0                                 // 000006E4: 9300000D
  s_lshl_b32    s0, s0, 8                                   // 000006E8: 8F008800
  s_add_i32     s1, s14, s0                                 // 000006EC: 8101000E
  v_mov_b32     v2, s1                                      // 000006F0: 7E040201
  s_add_i32     s0, s8, s0                                  // 000006F4: 81000008
  s_waitcnt     lgkmcnt(0)                                  // 000006F8: BF8C007F
  tbuffer_store_format_x  v0, v2, s[16:19], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 000006FC: EBA41000 80040002
  s_waitcnt     expcnt(0)                                   // 00000704: BF8C0F0F
  v_mov_b32     v0, s0                                      // 00000708: 7E000200
  tbuffer_store_format_x  v1, v0, s[20:23], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 0000070C: EBA41000 80050100
  s_branch      label_02C9                                  // 00000714: BF820103
label_01C6:
  v_add_i32     v1, vcc, 1, v0                              // 00000718: 4A020081
  s_movk_i32    s1, 0x0002                                  // 0000071C: B0010002
label_01C8:
  s_sub_i32     s2, 0, s1                                   // 00000720: 81820180
  s_max_i32     s2, s1, s2                                  // 00000724: 84020201
  v_cvt_f32_u32  v2, s2                                     // 00000728: 7E040C02
  v_rcp_f32     v2, v2                                      // 0000072C: 7E045502
  v_mul_f32     v2, 0x4f800000, v2                          // 00000730: 100404FF 4F800000
  v_cvt_u32_f32  v2, v2                                     // 00000738: 7E040F02
  v_mul_lo_u32  v4, s2, v2                                  // 0000073C: D2D20004 00020402
  v_mul_hi_u32  v5, s2, v2                                  // 00000744: D2D40005 00020402
  v_sub_i32     v6, vcc, 0, v4                              // 0000074C: 4C0C0880
  v_cmp_ne_i32  s[4:5], 0, v5                               // 00000750: D10A0004 00020A80
  v_cndmask_b32  v4, v6, v4, s[4:5]                         // 00000758: D2000004 00120906
  v_mul_hi_u32  v4, v4, v2                                  // 00000760: D2D40004 00020504
  v_sub_i32     v5, vcc, 0, v1                              // 00000768: 4C0A0280
  v_sub_i32     v6, vcc, v2, v4                             // 0000076C: 4C0C0902
  v_add_i32     v2, vcc, v2, v4                             // 00000770: 4A040902
  v_max_i32     v4, v1, v5                                  // 00000774: 24080B01
  v_cndmask_b32  v2, v2, v6, s[4:5]                         // 00000778: D2000002 00120D02
  v_mul_hi_u32  v2, v2, v4                                  // 00000780: D2D40002 00020902
  v_mul_lo_u32  v5, v2, s2                                  // 00000788: D2D20005 00000502
  v_sub_i32     v6, vcc, v4, v5                             // 00000790: 4C0C0B04
  v_cmp_ge_u32  s[4:5], v4, v5                              // 00000794: D18C0004 00020B04
  v_cmp_ge_u32  s[6:7], v6, s2                              // 0000079C: D18C0006 00000506
  v_add_i32     v5, vcc, 1, v2                              // 000007A4: 4A0A0481
  s_and_b64     s[6:7], s[4:5], s[6:7]                      // 000007A8: 87860604
  v_add_i32     v6, vcc, -1, v2                             // 000007AC: 4A0C04C1
  v_cndmask_b32  v2, v2, v5, s[6:7]                         // 000007B0: D2000002 001A0B02
  v_cndmask_b32  v2, v6, v2, s[4:5]                         // 000007B8: D2000002 00120506
  v_cmp_ne_i32  vcc, 0, s2                                  // 000007C0: D10A006A 00000480
  v_cmp_lt_i32  s[2:3], s1, 0                               // 000007C8: D1020002 00010001
  v_cmp_lt_i32  s[4:5], v1, 0                               // 000007D0: D1020004 00010101
  v_cndmask_b32  v2, -1, v2, vcc                            // 000007D8: 000404C1
  s_xor_b64     s[2:3], s[4:5], s[2:3]                      // 000007DC: 89820204
  v_sub_i32     v5, vcc, 0, v2                              // 000007E0: 4C0A0480
  v_cndmask_b32  v2, v2, v5, s[2:3]                         // 000007E4: D2000002 000A0B02
  v_mul_lo_i32  v2, v2, s1                                  // 000007EC: D2D60002 00000302
  v_sub_i32     v2, vcc, v1, v2                             // 000007F4: 4C040501
  v_cmp_eq_i32  vcc, 0, v2                                  // 000007F8: 7D040480
  s_and_saveexec_b64  s[2:3], vcc                           // 000007FC: BE82246A
  s_cbranch_execz  label_0216                               // 00000800: BF880015
  s_lshr_b32    s6, s1, 31                                  // 00000804: 90069F01
  s_add_i32     s6, s1, s6                                  // 00000808: 81060601
  s_lshr_b32    s6, s6, 1                                   // 0000080C: 90068106
  v_subrev_i32  v2, vcc, s6, v0                             // 00000810: 4E040006
  ds_read2_b32  v[5:6], v3 offset1:64                       // 00000814: D8DC4000 05000003
  v_lshlrev_b32  v2, 2, v2                                  // 0000081C: 34040482
  ds_read_b32   v7, v2                                      // 00000820: D8D80000 07000002
  v_add_i32     v2, vcc, 0x00000100, v2                     // 00000828: 4A0404FF 00000100
  s_waitcnt     lgkmcnt(0)                                  // 00000830: BF8C007F
  v_add_f32     v5, v5, v7                                  // 00000834: 060A0F05
  ds_write_b32  v3, v5                                      // 00000838: D8340000 00000503
  ds_read_b32   v2, v2                                      // 00000840: D8D80000 02000002
  s_waitcnt     lgkmcnt(0)                                  // 00000848: BF8C007F
  v_add_f32     v2, v2, v6                                  // 0000084C: 06040D02
  ds_write_b32  v3, v2 offset:256                           // 00000850: D8340100 00000203
label_0216:
  s_mov_b64     exec, s[2:3]                                // 00000858: BEFE0402
  s_lshl_b32    s2, s1, 1                                   // 0000085C: 8F028101
  v_cmp_lt_i32  s[6:7], s2, 0                               // 00000860: D1020006 00010002
  s_sub_i32     s3, 0, s2                                   // 00000868: 81830280
  s_max_i32     s3, s2, s3                                  // 0000086C: 84030302
  v_cvt_f32_u32  v2, s3                                     // 00000870: 7E040C03
  v_rcp_f32     v2, v2                                      // 00000874: 7E045502
  v_mul_f32     v2, 0x4f800000, v2                          // 00000878: 100404FF 4F800000
  v_cvt_u32_f32  v2, v2                                     // 00000880: 7E040F02
  v_mul_lo_u32  v5, s3, v2                                  // 00000884: D2D20005 00020403
  v_mul_hi_u32  v6, s3, v2                                  // 0000088C: D2D40006 00020403
  v_sub_i32     v7, vcc, 0, v5                              // 00000894: 4C0E0A80
  v_cmp_ne_i32  s[10:11], 0, v6                             // 00000898: D10A000A 00020C80
  v_cndmask_b32  v5, v7, v5, s[10:11]                       // 000008A0: D2000005 002A0B07
  v_mul_hi_u32  v5, v5, v2                                  // 000008A8: D2D40005 00020505
  v_sub_i32     v6, vcc, v2, v5                             // 000008B0: 4C0C0B02
  v_add_i32     v2, vcc, v2, v5                             // 000008B4: 4A040B02
  v_cndmask_b32  v2, v2, v6, s[10:11]                       // 000008B8: D2000002 002A0D02
  v_mul_hi_u32  v2, v2, v4                                  // 000008C0: D2D40002 00020902
  v_mul_lo_u32  v5, v2, s3                                  // 000008C8: D2D20005 00000702
  v_sub_i32     v6, vcc, v4, v5                             // 000008D0: 4C0C0B04
  v_cmp_ge_u32  s[10:11], v4, v5                            // 000008D4: D18C000A 00020B04
  v_add_i32     v5, vcc, 1, v2                              // 000008DC: 4A0A0481
  v_add_i32     v7, vcc, -1, v2                             // 000008E0: 4A0E04C1
  v_cmp_le_u32  vcc, s3, v6                                 // 000008E4: 7D860C03
  s_and_b64     vcc, s[10:11], vcc                          // 000008E8: 87EA6A0A
  v_cndmask_b32  v2, v2, v5, vcc                            // 000008EC: 00040B02
  v_cndmask_b32  v2, v7, v2, s[10:11]                       // 000008F0: D2000002 002A0507
  v_cmp_ne_i32  vcc, 0, s3                                  // 000008F8: D10A006A 00000680
  v_cndmask_b32  v2, -1, v2, vcc                            // 00000900: 000404C1
  s_xor_b64     s[6:7], s[4:5], s[6:7]                      // 00000904: 89860604
  v_sub_i32     v5, vcc, 0, v2                              // 00000908: 4C0A0480
  v_cndmask_b32  v2, v2, v5, s[6:7]                         // 0000090C: D2000002 001A0B02
  v_mul_lo_i32  v2, v2, s2                                  // 00000914: D2D60002 00000502
  v_sub_i32     v2, vcc, v1, v2                             // 0000091C: 4C040501
  v_cmp_eq_i32  vcc, 0, v2                                  // 00000920: 7D040480
  s_waitcnt     lgkmcnt(0)                                  // 00000924: BF8C007F
  s_barrier                                                 // 00000928: BF8A0000
  s_and_saveexec_b64  s[6:7], vcc                           // 0000092C: BE86246A
  s_cbranch_execz  label_0263                               // 00000930: BF880016
  s_bfe_u32     s3, s1, 0x0001001e                          // 00000934: 9383FF01 0001001E
  s_add_i32     s2, s2, s3                                  // 0000093C: 81020302
  s_lshr_b32    s2, s2, 1                                   // 00000940: 90028102
  v_subrev_i32  v2, vcc, s2, v0                             // 00000944: 4E040002
  ds_read2_b32  v[5:6], v3 offset1:64                       // 00000948: D8DC4000 05000003
  v_lshlrev_b32  v2, 2, v2                                  // 00000950: 34040482
  ds_read_b32   v7, v2                                      // 00000954: D8D80000 07000002
  v_add_i32     v2, vcc, 0x00000100, v2                     // 0000095C: 4A0404FF 00000100
  s_waitcnt     lgkmcnt(0)                                  // 00000964: BF8C007F
  v_add_f32     v5, v5, v7                                  // 00000968: 060A0F05
  ds_write_b32  v3, v5                                      // 0000096C: D8340000 00000503
  ds_read_b32   v2, v2                                      // 00000974: D8D80000 02000002
  s_waitcnt     lgkmcnt(0)                                  // 0000097C: BF8C007F
  v_add_f32     v2, v2, v6                                  // 00000980: 06040D02
  ds_write_b32  v3, v2 offset:256                           // 00000984: D8340100 00000203
label_0263:
  s_mov_b64     exec, s[6:7]                                // 0000098C: BEFE0406
  s_lshl_b32    s2, s1, 2                                   // 00000990: 8F028201
  v_cmp_lt_i32  s[6:7], s2, 0                               // 00000994: D1020006 00010002
  s_sub_i32     s3, 0, s2                                   // 0000099C: 81830280
  s_max_i32     s3, s2, s3                                  // 000009A0: 84030302
  v_cvt_f32_u32  v2, s3                                     // 000009A4: 7E040C03
  v_rcp_f32     v2, v2                                      // 000009A8: 7E045502
  v_mul_f32     v2, 0x4f800000, v2                          // 000009AC: 100404FF 4F800000
  v_cvt_u32_f32  v2, v2                                     // 000009B4: 7E040F02
  v_mul_lo_u32  v5, s3, v2                                  // 000009B8: D2D20005 00020403
  v_mul_hi_u32  v6, s3, v2                                  // 000009C0: D2D40006 00020403
  v_sub_i32     v7, vcc, 0, v5                              // 000009C8: 4C0E0A80
  v_cmp_ne_i32  s[10:11], 0, v6                             // 000009CC: D10A000A 00020C80
  v_cndmask_b32  v5, v7, v5, s[10:11]                       // 000009D4: D2000005 002A0B07
  v_mul_hi_u32  v5, v5, v2                                  // 000009DC: D2D40005 00020505
  v_sub_i32     v6, vcc, v2, v5                             // 000009E4: 4C0C0B02
  v_add_i32     v2, vcc, v2, v5                             // 000009E8: 4A040B02
  v_cndmask_b32  v2, v2, v6, s[10:11]                       // 000009EC: D2000002 002A0D02
  v_mul_hi_u32  v2, v2, v4                                  // 000009F4: D2D40002 00020902
  v_mul_lo_u32  v5, v2, s3                                  // 000009FC: D2D20005 00000702
  v_sub_i32     v6, vcc, v4, v5                             // 00000A04: 4C0C0B04
  v_cmp_ge_u32  s[10:11], v4, v5                            // 00000A08: D18C000A 00020B04
  v_add_i32     v4, vcc, 1, v2                              // 00000A10: 4A080481
  v_add_i32     v5, vcc, -1, v2                             // 00000A14: 4A0A04C1
  v_cmp_le_u32  vcc, s3, v6                                 // 00000A18: 7D860C03
  s_and_b64     vcc, s[10:11], vcc                          // 00000A1C: 87EA6A0A
  v_cndmask_b32  v2, v2, v4, vcc                            // 00000A20: 00040902
  v_cndmask_b32  v2, v5, v2, s[10:11]                       // 00000A24: D2000002 002A0505
  v_cmp_ne_i32  vcc, 0, s3                                  // 00000A2C: D10A006A 00000680
  v_cndmask_b32  v2, -1, v2, vcc                            // 00000A34: 000404C1
  s_xor_b64     s[4:5], s[4:5], s[6:7]                      // 00000A38: 89840604
  v_sub_i32     v4, vcc, 0, v2                              // 00000A3C: 4C080480
  v_cndmask_b32  v2, v2, v4, s[4:5]                         // 00000A40: D2000002 00120902
  v_mul_lo_i32  v2, v2, s2                                  // 00000A48: D2D60002 00000502
  v_sub_i32     v2, vcc, v1, v2                             // 00000A50: 4C040501
  v_cmp_eq_i32  vcc, 0, v2                                  // 00000A54: 7D040480
  s_waitcnt     lgkmcnt(0)                                  // 00000A58: BF8C007F
  s_barrier                                                 // 00000A5C: BF8A0000
  s_and_saveexec_b64  s[4:5], vcc                           // 00000A60: BE84246A
  s_cbranch_execz  label_02B0                               // 00000A64: BF880016
  s_bfe_u32     s3, s1, 0x0001001d                          // 00000A68: 9383FF01 0001001D
  s_add_i32     s2, s2, s3                                  // 00000A70: 81020302
  s_lshr_b32    s2, s2, 1                                   // 00000A74: 90028102
  v_subrev_i32  v2, vcc, s2, v0                             // 00000A78: 4E040002
  ds_read2_b32  v[4:5], v3 offset1:64                       // 00000A7C: D8DC4000 04000003
  v_lshlrev_b32  v2, 2, v2                                  // 00000A84: 34040482
  ds_read_b32   v6, v2                                      // 00000A88: D8D80000 06000002
  v_add_i32     v2, vcc, 0x00000100, v2                     // 00000A90: 4A0404FF 00000100
  s_waitcnt     lgkmcnt(0)                                  // 00000A98: BF8C007F
  v_add_f32     v4, v4, v6                                  // 00000A9C: 06080D04
  ds_write_b32  v3, v4                                      // 00000AA0: D8340000 00000403
  ds_read_b32   v2, v2                                      // 00000AA8: D8D80000 02000002
  s_waitcnt     lgkmcnt(0)                                  // 00000AB0: BF8C007F
  v_add_f32     v2, v2, v5                                  // 00000AB4: 06040B02
  ds_write_b32  v3, v2 offset:256                           // 00000AB8: D8340100 00000203
label_02B0:
  s_mov_b64     exec, s[4:5]                                // 00000AC0: BEFE0404
  s_waitcnt     lgkmcnt(0)                                  // 00000AC4: BF8C007F
  s_barrier                                                 // 00000AC8: BF8A0000
  s_lshl_b32    s1, s1, 3                                   // 00000ACC: 8F018301
  s_cmp_ge_i32  s1, 0x00000041                              // 00000AD0: BF03FF01 00000041
  s_cbranch_scc0  label_01C8                                // 00000AD8: BF84FF11
  v_cmp_eq_i32  vcc, 63, v0                                 // 00000ADC: 7D0400BF
  s_and_saveexec_b64  s[2:3], vcc                           // 00000AE0: BE82246A
  v_mov_b32     v0, 0                                       // 00000AE4: 7E000280
  s_cbranch_execz  label_02C9                               // 00000AE8: BF88000E
  ds_read2_b32  v[0:1], v0 offset0:63 offset1:127           // 00000AEC: D8DC7F3F 00000000
  s_mul_i32     s0, s13, s0                                 // 00000AF4: 9300000D
  s_lshl_b32    s0, s0, 8                                   // 00000AF8: 8F008800
  s_add_i32     s1, s14, s0                                 // 00000AFC: 8101000E
  v_mov_b32     v2, s1                                      // 00000B00: 7E040201
  s_add_i32     s0, s8, s0                                  // 00000B04: 81000008
  s_waitcnt     lgkmcnt(0)                                  // 00000B08: BF8C007F
  tbuffer_store_format_x  v0, v2, s[16:19], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000B0C: EBA41000 80040002
  s_waitcnt     expcnt(0)                                   // 00000B14: BF8C0F0F
  v_mov_b32     v0, s0                                      // 00000B18: 7E000200
  tbuffer_store_format_x  v1, v0, s[20:23], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000B1C: EBA41000 80050100
label_02C9:
  s_endpgm                                                  // 00000B24: BF810000
end

; ----------------- CS Data ------------------------

codeLenInByte        = 2856 bytes;

userElementCount     = 3;
;  userElements[0]      = PTR_UAV_TABLE, Element=1 dwords, s[2:3]
;  userElements[1]      = IMM_CONST_BUFFER 0, s[4:7]
;  userElements[2]      = IMM_CONST_BUFFER 1, s[8:11]
extUserElementCount  = 0;
NumVgprs             = 8;
NumSgprs             = 24;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s0;
; texSamplerUsage         = 0x00000000
; constBufUsage           = 0x00000000

;COMPUTE_PGM_RSRC2       = 0x00010098
COMPUTE_PGM_RSRC2:USER_SGPR      = 12
COMPUTE_PGM_RSRC2:TGID_X_EN      = 1
COMPUTE_PGM_RSRC2:LDS_SIZE       = 2
NumThreadX                       = 256

