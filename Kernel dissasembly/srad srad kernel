ShaderType = IL_SHADER_COMPUTE
TargetChip = t
; ------------- SC_SRCSHADER Dump ------------------
SC_SHADERSTATE: u32NumIntVSConst = 0
SC_SHADERSTATE: u32NumIntPSConst = 0
SC_SHADERSTATE: u32NumIntGSConst = 0
SC_SHADERSTATE: u32NumBoolVSConst = 0
SC_SHADERSTATE: u32NumBoolPSConst = 0
SC_SHADERSTATE: u32NumBoolGSConst = 0
SC_SHADERSTATE: u32NumFloatVSConst = 0
SC_SHADERSTATE: u32NumFloatPSConst = 0
SC_SHADERSTATE: u32NumFloatGSConst = 0
u32SCOptions[0] = 0x00680000 SCOption_IGNORE_SAMPLE_L_BUG SCOption_FLOAT_DO_NOT_DIST SCOption_FLOAT_DO_NOT_REASSOC
u32SCOptions[1] = 0x40000000 SCOption_R800_UAV_NONARRAY_FIXUP
u32SCOptions[2] = 0x08200000 SCOption_R1000_BYTE_SHORT_WRITE_WORKAROUND_BUG317611 SCOption_R1000_READLANE_SMRD_WORKAROUND_BUG343479
u32SCOptions[3] = 0x01000204 SCOption_R1000_BARRIER_WORKAROUND_BUG405404 SCOption_R1000R1100_VCCZ_CLOBBER_WORKAROUND_BUG457939 SCOption_SELECTIVE_INLINE
; -------- Disassembly --------------------
shader main
  asic(SI)
  type(CS)

  s_buffer_load_dword  s0, s[4:7], 0x1c                     // 00000000: C200051C
  s_buffer_load_dword  s1, s[8:11], 0x04                    // 00000004: C2008904
  s_buffer_load_dwordx2  s[4:5], s[8:11], 0x0c              // 00000008: C242090C
  s_buffer_load_dword  s6, s[8:11], 0x10                    // 0000000C: C2030910
  s_buffer_load_dword  s7, s[8:11], 0x14                    // 00000010: C2038914
  s_buffer_load_dword  s13, s[8:11], 0x18                   // 00000014: C2068918
  s_buffer_load_dword  s14, s[8:11], 0x1c                   // 00000018: C207091C
  s_buffer_load_dword  s15, s[8:11], 0x20                   // 0000001C: C2078920
  s_buffer_load_dword  s16, s[8:11], 0x24                   // 00000020: C2080924
  s_buffer_load_dword  s17, s[8:11], 0x28                   // 00000024: C2088928
  s_buffer_load_dword  s18, s[8:11], 0x2c                   // 00000028: C209092C
  s_buffer_load_dword  s19, s[8:11], 0x30                   // 0000002C: C2098930
  s_buffer_load_dword  s20, s[8:11], 0x34                   // 00000030: C20A0934
  s_buffer_load_dword  s8, s[8:11], 0x38                    // 00000034: C2040938
  s_waitcnt     lgkmcnt(0)                                  // 00000038: BF8C007F
  s_add_i32     s0, s12, s0                                 // 0000003C: 8100000C
  s_lshl_b32    s0, s0, 6                                   // 00000040: 8F008600
  v_add_i32     v7, vcc, s0, v0                             // 00000044: 4A0E0000
  v_ashrrev_i32  v8, 31, v7                                 // 00000048: 30100E9F
  v_cmp_gt_i64  vcc, s[4:5], v[7:8]                         // 0000004C: 7D480E04
  s_and_saveexec_b64  s[4:5], vcc                           // 00000050: BE84246A
  s_cbranch_execz  label_0118                               // 00000054: BF880102
  s_sub_i32     s0, 0, s1                                   // 00000058: 81800180
  s_max_i32     s0, s1, s0                                  // 0000005C: 84000001
  v_cvt_f32_u32  v1, s0                                     // 00000060: 7E020C00
  v_rcp_f32     v1, v1                                      // 00000064: 7E025501
  v_mul_f32     v1, 0x4f800000, v1                          // 00000068: 100202FF 4F800000
  v_cvt_u32_f32  v1, v1                                     // 00000070: 7E020F01
  v_mul_lo_u32  v2, s0, v1                                  // 00000074: D2D20002 00020200
  v_mul_hi_u32  v3, s0, v1                                  // 0000007C: D2D40003 00020200
  v_sub_i32     v4, vcc, 0, v2                              // 00000084: 4C080480
  v_cmp_ne_i32  s[4:5], 0, v3                               // 00000088: D10A0004 00020680
  v_cndmask_b32  v2, v4, v2, s[4:5]                         // 00000090: D2000002 00120504
  v_add_i32     v3, vcc, 1, v7                              // 00000098: 4A060E81
  v_mul_hi_u32  v2, v2, v1                                  // 0000009C: D2D40002 00020302
  v_sub_i32     v4, vcc, 0, v3                              // 000000A4: 4C080680
  v_sub_i32     v5, vcc, v1, v2                             // 000000A8: 4C0A0501
  v_add_i32     v1, vcc, v1, v2                             // 000000AC: 4A020501
  v_max_i32     v2, v3, v4                                  // 000000B0: 24040903
  v_cndmask_b32  v1, v1, v5, s[4:5]                         // 000000B4: D2000001 00120B01
  v_mul_hi_u32  v1, v1, v2                                  // 000000BC: D2D40001 00020501
  v_mul_lo_u32  v4, v1, s0                                  // 000000C4: D2D20004 00000101
  v_sub_i32     v5, vcc, v2, v4                             // 000000CC: 4C0A0902
  v_cmp_ge_u32  s[4:5], v2, v4                              // 000000D0: D18C0004 00020902
  v_cmp_ge_u32  s[10:11], v5, s0                            // 000000D8: D18C000A 00000105
  v_add_i32     v2, vcc, 1, v1                              // 000000E0: 4A040281
  s_and_b64     s[10:11], s[4:5], s[10:11]                  // 000000E4: 878A0A04
  v_add_i32     v4, vcc, -1, v1                             // 000000E8: 4A0802C1
  v_cndmask_b32  v1, v1, v2, s[10:11]                       // 000000EC: D2000001 002A0501
  v_cndmask_b32  v1, v4, v1, s[4:5]                         // 000000F4: D2000001 00120304
  v_cmp_ne_i32  vcc, 0, s0                                  // 000000FC: D10A006A 00000080
  v_cmp_lt_i32  s[4:5], v3, 0                               // 00000104: D1020004 00010103
  v_cmp_lt_i32  s[10:11], s1, 0                             // 0000010C: D102000A 00010001
  v_cndmask_b32  v1, -1, v1, vcc                            // 00000114: 000202C1
  s_xor_b64     s[4:5], s[4:5], s[10:11]                    // 00000118: 89840A04
  v_sub_i32     v2, vcc, 0, v1                              // 0000011C: 4C040280
  v_cndmask_b32  v1, v1, v2, s[4:5]                         // 00000120: D2000001 00120501
  v_mul_lo_i32  v2, v1, s1                                  // 00000128: D2D60002 00000301
  v_sub_i32     v2, vcc, v3, v2                             // 00000130: 4C040503
  v_cmp_eq_i32  vcc, 0, v2                                  // 00000134: 7D040480
  v_mov_b32     v3, s1                                      // 00000138: 7E060201
  v_cndmask_b32  v2, v2, v3, vcc                            // 0000013C: 00040702
  v_subb_u32    v1, vcc, v1, 0, vcc                         // 00000140: D2526A01 01A90101
  v_lshlrev_b32  v3, 2, v2                                  // 00000148: 34060482
  v_add_i32     v4, vcc, s7, v3                             // 0000014C: 4A080607
  v_add_i32     v3, vcc, s6, v3                             // 00000150: 4A060606
  v_lshlrev_b32  v5, 2, v1                                  // 00000154: 340A0282
  s_load_dwordx4  s[4:7], s[2:3], 0x68                      // 00000158: C0820368
  s_load_dwordx4  s[24:27], s[2:3], 0x60                    // 0000015C: C08C0360
  s_load_dwordx4  s[28:31], s[2:3], 0x78                    // 00000160: C08E0378
  v_add_i32     v4, vcc, -4, v4                             // 00000164: 4A0808C4
  v_add_i32     v3, vcc, -4, v3                             // 00000168: 4A0606C4
  v_add_i32     v6, vcc, s14, v5                            // 0000016C: 4A0C0A0E
  s_load_dwordx4  s[32:35], s[2:3], 0x70                    // 00000170: C0900370
  v_add_i32     v5, vcc, s13, v5                            // 00000174: 4A0A0A0D
  s_waitcnt     lgkmcnt(0)                                  // 00000178: BF8C007F
  tbuffer_load_format_x  v4, v4, s[4:7], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 0000017C: EBA01000 80010404
  tbuffer_load_format_x  v3, v3, s[24:27], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000184: EBA01000 80060303
  tbuffer_load_format_x  v6, v6, s[28:31], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 0000018C: EBA01000 80070606
  tbuffer_load_format_x  v5, v5, s[32:35], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000194: EBA01000 80080505
  v_mul_lo_i32  v1, v1, s1                                  // 0000019C: D2D60001 00000301
  v_add_i32     v2, vcc, -1, v2                             // 000001A4: 4A0404C1
  s_waitcnt     vmcnt(3)                                    // 000001A8: BF8C0F73
  v_add_i32     v4, vcc, v1, v4                             // 000001AC: 4A080901
  s_waitcnt     vmcnt(2)                                    // 000001B0: BF8C0F72
  v_add_i32     v1, vcc, v1, v3                             // 000001B4: 4A020701
  s_waitcnt     vmcnt(1)                                    // 000001B8: BF8C0F71
  v_mul_lo_i32  v3, v6, s1                                  // 000001BC: D2D60003 00000306
  v_lshlrev_b32  v4, 2, v4                                  // 000001C4: 34080882
  v_lshlrev_b32  v0, 2, v7                                  // 000001C8: 34000E82
  v_lshlrev_b32  v1, 2, v1                                  // 000001CC: 34020282
  v_add_i32     v3, vcc, v2, v3                             // 000001D0: 4A060702
  s_waitcnt     vmcnt(0)                                    // 000001D4: BF8C0F70
  v_mul_lo_i32  v5, v5, s1                                  // 000001D8: D2D60005 00000305
  s_load_dwordx4  s[4:7], s[2:3], 0xa8                      // 000001E0: C08203A8
  v_add_i32     v4, vcc, s8, v4                             // 000001E4: 4A080808
  v_add_i32     v6, vcc, s8, v0                             // 000001E8: 4A0C0008
  v_add_i32     v1, vcc, s8, v1                             // 000001EC: 4A020208
  v_lshlrev_b32  v3, 2, v3                                  // 000001F0: 34060682
  v_add_i32     v2, vcc, v2, v5                             // 000001F4: 4A040B02
  v_add_i32     v3, vcc, s8, v3                             // 000001F8: 4A060608
  v_lshlrev_b32  v2, 2, v2                                  // 000001FC: 34040482
  v_add_i32     v2, vcc, s8, v2                             // 00000200: 4A040408
  s_waitcnt     lgkmcnt(0)                                  // 00000204: BF8C007F
  tbuffer_load_format_x  v4, v4, s[4:7], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000208: EBA01000 80010404
  tbuffer_load_format_x  v5, v6, s[4:7], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000210: EBA01000 80010506
  tbuffer_load_format_x  v1, v1, s[4:7], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000218: EBA01000 80010101
  tbuffer_load_format_x  v3, v3, s[4:7], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000220: EBA01000 80010303
  tbuffer_load_format_x  v2, v2, s[4:7], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000228: EBA01000 80010202
  s_mov_b32     s0, 0x6f800000                              // 00000230: BE8003FF 6F800000
  s_waitcnt     vmcnt(3)                                    // 00000238: BF8C0F73
  v_sub_f32     v4, v4, v5                                  // 0000023C: 08080B04
  s_waitcnt     vmcnt(2)                                    // 00000240: BF8C0F72
  v_subrev_f32  v1, v5, v1                                  // 00000244: 0A020305
  v_cmp_gt_f32  vcc, abs(v5), s0                            // 00000248: D008016A 00000105
  v_mov_b32     v6, 0x2f800000                              // 00000250: 7E0C02FF 2F800000
  v_add_f32     v7, v4, v1                                  // 00000258: 060E0304
  s_waitcnt     vmcnt(1)                                    // 0000025C: BF8C0F71
  v_subrev_f32  v3, v5, v3                                  // 00000260: 0A060705
  v_cndmask_b32  v8, 1.0, v6, vcc                           // 00000264: 00100CF2
  v_add_f32     v7, v7, v3                                  // 00000268: 060E0707
  s_waitcnt     vmcnt(0)                                    // 0000026C: BF8C0F70
  v_subrev_f32  v2, v5, v2                                  // 00000270: 0A040505
  v_mul_f32     v9, v5, v8                                  // 00000274: 10121105
  v_add_f32     v7, v7, v2                                  // 00000278: 060E0507
  v_rcp_f32     v9, v9                                      // 0000027C: 7E125509
  v_mul_f32     v7, v7, v9                                  // 00000280: 100E1307
  v_mul_f32     v5, v5, v5                                  // 00000284: 100A0B05
  v_mul_f32     v7, v8, v7                                  // 00000288: 100E0F08
  v_mul_f32     v8, v1, v1                                  // 0000028C: 10100301
  v_cmp_gt_f32  vcc, abs(v5), s0                            // 00000290: D008016A 00000105
  v_cvt_f64_f32  v[9:10], v7                                // 00000298: 7E122107
  v_mov_b32     v11, 0                                      // 0000029C: 7E160280
  v_mov_b32     v12, 0x3fd00000                             // 000002A0: 7E1802FF 3FD00000
  v_mac_f32     v8, v4, v4                                  // 000002A8: 3E100904
  v_cndmask_b32  v13, 1.0, v6, vcc                          // 000002AC: 001A0CF2
  v_mul_f64     v[9:10], v[9:10], v[11:12]                  // 000002B0: D2CA0009 00021709
  v_mac_f32     v8, v3, v3                                  // 000002B8: 3E100703
  v_mul_f32     v5, v5, v13                                 // 000002BC: 100A1B05
  v_add_f64     v[9:10], v[9:10], 1.0                       // 000002C0: D2C80009 0001E509
  v_mac_f32     v8, v2, v2                                  // 000002C8: 3E100502
  v_rcp_f32     v5, v5                                      // 000002CC: 7E0A5505
  v_cvt_f32_f64  v9, v[9:10]                                // 000002D0: 7E121F09
  v_mul_f32     v5, v8, v5                                  // 000002D4: 100A0B08
  v_mul_f32     v8, v9, v9                                  // 000002D8: 10101309
  v_mul_f32     v7, v7, v7                                  // 000002DC: 100E0F07
  v_mul_f32     v5, v13, v5                                 // 000002E0: 100A0B0D
  v_cmp_gt_f32  vcc, abs(v8), s0                            // 000002E4: D008016A 00000108
  v_cvt_f64_f32  v[9:10], v7                                // 000002EC: 7E122107
  v_mov_b32     v11, 0                                      // 000002F0: 7E160280
  v_mov_b32     v12, 0xbfb00000                             // 000002F4: 7E1802FF BFB00000
  v_cvt_f64_f32  v[13:14], v5                               // 000002FC: 7E1A2105
  v_add_f32     v5, s19, 1.0                                // 00000300: D2060005 0001E413
  v_cndmask_b32  v7, 1.0, v6, vcc                           // 00000308: 000E0CF2
  v_mul_f64     v[9:10], v[9:10], v[11:12]                  // 0000030C: D2CA0009 00021709
  v_mul_f64     v[11:12], v[13:14], 0.5                     // 00000314: D2CA000B 0001E10D
  v_mul_f32     v5, s19, v5                                 // 0000031C: 100A0A13
  v_mul_f32     v8, v8, v7                                  // 00000320: 10100F08
  v_add_f64     v[9:10], v[11:12], v[9:10]                  // 00000324: D2C80009 0002130B
  v_cmp_gt_f32  vcc, abs(v5), s0                            // 0000032C: D008016A 00000105
  v_cvt_f32_f64  v9, v[9:10]                                // 00000334: 7E121F09
  v_rcp_f32     v8, v8                                      // 00000338: 7E105508
  v_cndmask_b32  v6, 1.0, v6, vcc                           // 0000033C: 000C0CF2
  v_mul_f32     v8, v9, v8                                  // 00000340: 10101109
  v_mul_f32     v5, v5, v6                                  // 00000344: 100A0D05
  v_mad_f32     v7, v7, v8, -s19                            // 00000348: D2820007 804E1107
  v_rcp_f32     v5, v5                                      // 00000350: 7E0A5505
  v_mul_f32     v5, v7, v5                                  // 00000354: 100A0B07
  v_mul_f32     v5, v6, v5                                  // 00000358: 100A0B06
  v_cvt_f64_f32  v[5:6], v5                                 // 0000035C: 7E0A2105
  v_add_f64     v[5:6], v[5:6], 1.0                         // 00000360: D2C80005 0001E505
  v_div_scale_f64  v[7:8], vcc, v[5:6], v[5:6], 1.0         // 00000368: D2DC6A07 03CA0B05
  v_rcp_f64     v[9:10], v[7:8]                             // 00000370: 7E125F07
  v_fma_f64     v[11:12], -v[7:8], v[9:10], 1.0             // 00000374: D298000B 23CA1307
  v_fma_f64     v[9:10], v[9:10], v[11:12], v[9:10]         // 0000037C: D2980009 04261709
  v_fma_f64     v[11:12], -v[7:8], v[9:10], 1.0             // 00000384: D298000B 23CA1307
  v_div_scale_f64  v[13:14], vcc, 1.0, v[5:6], 1.0          // 0000038C: D2DC6A0D 03CA0AF2
  s_mov_b32     s0, 0x3ff00000                              // 00000394: BE8003FF 3FF00000
  v_fma_f64     v[9:10], v[9:10], v[11:12], v[9:10]         // 0000039C: D2980009 04261709
  v_cmp_eq_i32  s[4:5], v6, v8                              // 000003A4: D1040004 00021106
  v_cmp_eq_i32  vcc, s0, v14                                // 000003AC: 7D041C00
  v_mul_f64     v[11:12], v[13:14], v[9:10]                 // 000003B0: D2CA000B 0002130D
  s_xor_b64     vcc, s[4:5], vcc                            // 000003B8: 89EA6A04
  v_fma_f64     v[7:8], -v[7:8], v[11:12], v[13:14]         // 000003BC: D2980007 24361707
  v_div_fmas_f64  v[7:8], v[7:8], v[9:10], v[11:12]         // 000003C4: D2E00007 042E1307
  v_div_fixup_f64  v[5:6], v[7:8], v[5:6], 1.0              // 000003CC: D2C00005 03CA0B07
  v_cvt_f32_f64  v5, v[5:6]                                 // 000003D4: 7E0A1F05
  v_cmp_nlt_f32  s[0:1], v5, 0                              // 000003D8: D01C0000 00010105
  s_and_saveexec_b64  s[0:1], s[0:1]                        // 000003E0: BE802400
  v_cmp_ge_f32  vcc, 1.0, v5                                // 000003E4: 7C0C0AF2
  v_cndmask_b32  v5, 1.0, v5, vcc                           // 000003E8: 000A0AF2
  s_andn2_b64   exec, s[0:1], exec                          // 000003EC: 8AFE7E00
  v_mov_b32     v5, 0                                       // 000003F0: 7E0A0280
  s_mov_b64     exec, s[0:1]                                // 000003F4: BEFE0400
  v_add_i32     v6, vcc, s15, v0                            // 000003F8: 4A0C000F
  s_load_dwordx4  s[4:7], s[2:3], 0x80                      // 000003FC: C0820380
  s_waitcnt     lgkmcnt(0)                                  // 00000400: BF8C007F
  tbuffer_store_format_x  v1, v6, s[4:7], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000404: EBA41000 80010106
  s_waitcnt     expcnt(0)                                   // 0000040C: BF8C0F0F
  v_add_i32     v1, vcc, s16, v0                            // 00000410: 4A020010
  s_load_dwordx4  s[4:7], s[2:3], 0x88                      // 00000414: C0820388
  s_waitcnt     lgkmcnt(0)                                  // 00000418: BF8C007F
  tbuffer_store_format_x  v4, v1, s[4:7], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 0000041C: EBA41000 80010401
  v_add_i32     v1, vcc, s18, v0                            // 00000424: 4A020012
  s_load_dwordx4  s[4:7], s[2:3], 0x98                      // 00000428: C0820398
  s_waitcnt     lgkmcnt(0)                                  // 0000042C: BF8C007F
  tbuffer_store_format_x  v3, v1, s[4:7], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000430: EBA41000 80010301
  v_add_i32     v1, vcc, s17, v0                            // 00000438: 4A020011
  s_load_dwordx4  s[4:7], s[2:3], 0x90                      // 0000043C: C0820390
  s_waitcnt     lgkmcnt(0)                                  // 00000440: BF8C007F
  tbuffer_store_format_x  v2, v1, s[4:7], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000444: EBA41000 80010201
  v_add_i32     v0, vcc, s20, v0                            // 0000044C: 4A000014
  s_load_dwordx4  s[0:3], s[2:3], 0xa0                      // 00000450: C08003A0
  s_waitcnt     lgkmcnt(0)                                  // 00000454: BF8C007F
  tbuffer_store_format_x  v5, v0, s[0:3], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000458: EBA41000 80000500
label_0118:
  s_endpgm                                                  // 00000460: BF810000
end

; ----------------- CS Data ------------------------

codeLenInByte        = 1124 bytes;

userElementCount     = 3;
;  userElements[0]      = PTR_UAV_TABLE, Element=1 dwords, s[2:3]
;  userElements[1]      = IMM_CONST_BUFFER 0, s[4:7]
;  userElements[2]      = IMM_CONST_BUFFER 1, s[8:11]
extUserElementCount  = 0;
NumVgprs             = 15;
NumSgprs             = 36;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s0;
; texSamplerUsage         = 0x00000000
; constBufUsage           = 0x00000000

;COMPUTE_PGM_RSRC2       = 0x00000098
COMPUTE_PGM_RSRC2:USER_SGPR      = 12
COMPUTE_PGM_RSRC2:TGID_X_EN      = 1
NumThreadX                       = 256

