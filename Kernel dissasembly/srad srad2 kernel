ShaderType = IL_SHADER_COMPUTE
TargetChip = t
; ------------- SC_SRCSHADER Dump ------------------
SC_SHADERSTATE: u32NumIntVSConst = 0
SC_SHADERSTATE: u32NumIntPSConst = 0
SC_SHADERSTATE: u32NumIntGSConst = 0
SC_SHADERSTATE: u32NumBoolVSConst = 0
SC_SHADERSTATE: u32NumBoolPSConst = 0
SC_SHADERSTATE: u32NumBoolGSConst = 0
SC_SHADERSTATE: u32NumFloatVSConst = 0
SC_SHADERSTATE: u32NumFloatPSConst = 0
SC_SHADERSTATE: u32NumFloatGSConst = 0
u32SCOptions[0] = 0x00680000 SCOption_IGNORE_SAMPLE_L_BUG SCOption_FLOAT_DO_NOT_DIST SCOption_FLOAT_DO_NOT_REASSOC
u32SCOptions[1] = 0x40000000 SCOption_R800_UAV_NONARRAY_FIXUP
u32SCOptions[2] = 0x08200000 SCOption_R1000_BYTE_SHORT_WRITE_WORKAROUND_BUG317611 SCOption_R1000_READLANE_SMRD_WORKAROUND_BUG343479
u32SCOptions[3] = 0x01000204 SCOption_R1000_BARRIER_WORKAROUND_BUG405404 SCOption_R1000R1100_VCCZ_CLOBBER_WORKAROUND_BUG457939 SCOption_SELECTIVE_INLINE
; -------- Disassembly --------------------
shader main
  asic(SI)
  type(CS)

  s_buffer_load_dword  s0, s[4:7], 0x1c                     // 00000000: C200051C
  s_buffer_load_dword  s1, s[8:11], 0x00                    // 00000004: C2008900
  s_buffer_load_dword  s4, s[8:11], 0x04                    // 00000008: C2020904
  s_buffer_load_dwordx2  s[6:7], s[8:11], 0x0c              // 0000000C: C243090C
  s_buffer_load_dword  s5, s[8:11], 0x14                    // 00000010: C2028914
  s_buffer_load_dword  s13, s[8:11], 0x18                   // 00000014: C2068918
  s_buffer_load_dword  s14, s[8:11], 0x20                   // 00000018: C2070920
  s_buffer_load_dword  s15, s[8:11], 0x24                   // 0000001C: C2078924
  s_buffer_load_dword  s16, s[8:11], 0x28                   // 00000020: C2080928
  s_buffer_load_dword  s17, s[8:11], 0x2c                   // 00000024: C208892C
  s_buffer_load_dword  s18, s[8:11], 0x30                   // 00000028: C2090930
  s_buffer_load_dword  s8, s[8:11], 0x34                    // 0000002C: C2040934
  s_waitcnt     lgkmcnt(0)                                  // 00000030: BF8C007F
  s_add_i32     s0, s12, s0                                 // 00000034: 8100000C
  s_lshl_b32    s0, s0, 6                                   // 00000038: 8F008600
  v_add_i32     v6, vcc, s0, v0                             // 0000003C: 4A0C0000
  v_ashrrev_i32  v7, 31, v6                                 // 00000040: 300E0C9F
  v_cmp_gt_i64  vcc, s[6:7], v[6:7]                         // 00000044: 7D480C06
  s_and_saveexec_b64  s[6:7], vcc                           // 00000048: BE86246A
  s_cbranch_execz  label_00A0                               // 0000004C: BF88008C
  s_sub_i32     s0, 0, s4                                   // 00000050: 81800480
  s_max_i32     s0, s4, s0                                  // 00000054: 84000004
  v_cvt_f32_u32  v1, s0                                     // 00000058: 7E020C00
  v_rcp_f32     v1, v1                                      // 0000005C: 7E025501
  v_mul_f32     v1, 0x4f800000, v1                          // 00000060: 100202FF 4F800000
  v_cvt_u32_f32  v1, v1                                     // 00000068: 7E020F01
  v_mul_lo_u32  v2, s0, v1                                  // 0000006C: D2D20002 00020200
  v_mul_hi_u32  v3, s0, v1                                  // 00000074: D2D40003 00020200
  v_sub_i32     v4, vcc, 0, v2                              // 0000007C: 4C080480
  v_cmp_ne_i32  s[6:7], 0, v3                               // 00000080: D10A0006 00020680
  v_cndmask_b32  v2, v4, v2, s[6:7]                         // 00000088: D2000002 001A0504
  v_add_i32     v3, vcc, 1, v6                              // 00000090: 4A060C81
  v_mul_hi_u32  v2, v2, v1                                  // 00000094: D2D40002 00020302
  v_sub_i32     v4, vcc, 0, v3                              // 0000009C: 4C080680
  v_sub_i32     v5, vcc, v1, v2                             // 000000A0: 4C0A0501
  v_add_i32     v1, vcc, v1, v2                             // 000000A4: 4A020501
  v_max_i32     v2, v3, v4                                  // 000000A8: 24040903
  v_cndmask_b32  v1, v1, v5, s[6:7]                         // 000000AC: D2000001 001A0B01
  v_mul_hi_u32  v1, v1, v2                                  // 000000B4: D2D40001 00020501
  v_mul_lo_u32  v4, v1, s0                                  // 000000BC: D2D20004 00000101
  v_sub_i32     v5, vcc, v2, v4                             // 000000C4: 4C0A0902
  v_cmp_ge_u32  s[6:7], v2, v4                              // 000000C8: D18C0006 00020902
  v_cmp_ge_u32  s[10:11], v5, s0                            // 000000D0: D18C000A 00000105
  v_add_i32     v2, vcc, 1, v1                              // 000000D8: 4A040281
  s_and_b64     s[10:11], s[6:7], s[10:11]                  // 000000DC: 878A0A06
  v_add_i32     v4, vcc, -1, v1                             // 000000E0: 4A0802C1
  v_cndmask_b32  v1, v1, v2, s[10:11]                       // 000000E4: D2000001 002A0501
  v_cndmask_b32  v1, v4, v1, s[6:7]                         // 000000EC: D2000001 001A0304
  v_cmp_ne_i32  vcc, 0, s0                                  // 000000F4: D10A006A 00000080
  v_cmp_lt_i32  s[6:7], v3, 0                               // 000000FC: D1020006 00010103
  v_cmp_lt_i32  s[10:11], s4, 0                             // 00000104: D102000A 00010004
  v_cndmask_b32  v1, -1, v1, vcc                            // 0000010C: 000202C1
  s_xor_b64     s[6:7], s[6:7], s[10:11]                    // 00000110: 89860A06
  v_sub_i32     v2, vcc, 0, v1                              // 00000114: 4C040280
  v_cndmask_b32  v1, v1, v2, s[6:7]                         // 00000118: D2000001 001A0501
  v_mul_lo_i32  v2, v1, s4                                  // 00000120: D2D60002 00000901
  v_sub_i32     v2, vcc, v3, v2                             // 00000128: 4C040503
  v_cmp_eq_i32  vcc, 0, v2                                  // 0000012C: 7D040480
  v_mov_b32     v3, s4                                      // 00000130: 7E060204
  v_cndmask_b32  v2, v2, v3, vcc                            // 00000134: 00040702
  v_lshlrev_b32  v3, 2, v2                                  // 00000138: 34060482
  v_subb_u32    v1, vcc, v1, 0, vcc                         // 0000013C: D2526A01 01A90101
  v_add_i32     v3, vcc, s5, v3                             // 00000144: 4A060605
  s_load_dwordx4  s[20:23], s[2:3], 0x60                    // 00000148: C08A0360
  v_add_i32     v3, vcc, -4, v3                             // 0000014C: 4A0606C4
  v_lshlrev_b32  v4, 2, v1                                  // 00000150: 34080282
  s_load_dwordx4  s[24:27], s[2:3], 0x68                    // 00000154: C08C0368
  v_add_i32     v4, vcc, s13, v4                            // 00000158: 4A08080D
  s_waitcnt     lgkmcnt(0)                                  // 0000015C: BF8C007F
  tbuffer_load_format_x  v3, v3, s[20:23], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000160: EBA01000 80050303
  tbuffer_load_format_x  v4, v4, s[24:27], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000168: EBA01000 80060404
  v_mul_lo_i32  v1, v1, s4                                  // 00000170: D2D60001 00000901
  s_waitcnt     vmcnt(1)                                    // 00000178: BF8C0F71
  v_add_i32     v1, vcc, v1, v3                             // 0000017C: 4A020701
  v_lshlrev_b32  v0, 2, v6                                  // 00000180: 34000C82
  v_lshlrev_b32  v1, 2, v1                                  // 00000184: 34020282
  s_waitcnt     vmcnt(0)                                    // 00000188: BF8C0F70
  v_mul_lo_i32  v3, v4, s4                                  // 0000018C: D2D60003 00000904
  s_load_dwordx4  s[4:7], s[2:3], 0x90                      // 00000194: C0820390
  s_load_dwordx4  s[20:23], s[2:3], 0x78                    // 00000198: C08A0378
  v_add_i32     v1, vcc, s18, v1                            // 0000019C: 4A020212
  v_add_i32     v4, vcc, s15, v0                            // 000001A0: 4A08000F
  v_add_i32     v2, vcc, v2, v3                             // 000001A4: 4A040702
  s_load_dwordx4  s[24:27], s[2:3], 0x70                    // 000001A8: C08C0370
  v_add_i32     v3, vcc, s14, v0                            // 000001AC: 4A06000E
  v_add_i32     v5, vcc, s18, v0                            // 000001B0: 4A0A0012
  v_lshlrev_b32  v2, 2, v2                                  // 000001B4: 34040482
  s_load_dwordx4  s[12:15], s[2:3], 0x88                    // 000001B8: C0860388
  v_add_i32     v6, vcc, s17, v0                            // 000001BC: 4A0C0011
  v_add_i32     v2, vcc, s18, v2                            // 000001C0: 4A040412
  s_load_dwordx4  s[28:31], s[2:3], 0x80                    // 000001C4: C08E0380
  v_add_i32     v7, vcc, s16, v0                            // 000001C8: 4A0E0010
  v_add_i32     v2, vcc, -4, v2                             // 000001CC: 4A0404C4
  s_waitcnt     lgkmcnt(0)                                  // 000001D0: BF8C007F
  tbuffer_load_format_x  v1, v1, s[4:7], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 000001D4: EBA01000 80010101
  tbuffer_load_format_x  v4, v4, s[20:23], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 000001DC: EBA01000 80050404
  s_load_dwordx4  s[16:19], s[2:3], 0x98                    // 000001E4: C0880398
  v_add_i32     v0, vcc, s8, v0                             // 000001E8: 4A000008
  tbuffer_load_format_x  v3, v3, s[24:27], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 000001EC: EBA01000 80060303
  tbuffer_load_format_x  v5, v5, s[4:7], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 000001F4: EBA01000 80010505
  tbuffer_load_format_x  v6, v6, s[12:15], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 000001FC: EBA01000 80030606
  tbuffer_load_format_x  v7, v7, s[28:31], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000204: EBA01000 80070707
  tbuffer_load_format_x  v2, v2, s[4:7], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 0000020C: EBA01000 80010202
  s_waitcnt     lgkmcnt(0)                                  // 00000214: BF8C007F
  tbuffer_load_format_x  v8, v0, s[16:19], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000218: EBA01000 80040800
  s_waitcnt     vmcnt(6)                                    // 00000220: BF8C0F76
  v_mul_f32     v1, v1, v4                                  // 00000224: 10020901
  s_waitcnt     vmcnt(4)                                    // 00000228: BF8C0F74
  v_mac_f32     v1, v3, v5                                  // 0000022C: 3E020B03
  s_waitcnt     vmcnt(3)                                    // 00000230: BF8C0F73
  v_mac_f32     v1, v5, v6                                  // 00000234: 3E020D05
  s_waitcnt     vmcnt(1)                                    // 00000238: BF8C0F71
  v_mac_f32     v1, v7, v2                                  // 0000023C: 3E020507
  v_cvt_f64_f32  v[2:3], s1                                 // 00000240: 7E042001
  v_mov_b32     v4, 0                                       // 00000244: 7E080280
  v_mov_b32     v5, 0x3fd00000                              // 00000248: 7E0A02FF 3FD00000
  v_cvt_f64_f32  v[6:7], v1                                 // 00000250: 7E0C2101
  v_mul_f64     v[1:2], v[2:3], v[4:5]                      // 00000254: D2CA0001 00020902
  v_mul_f64     v[1:2], v[1:2], v[6:7]                      // 0000025C: D2CA0001 00020D01
  s_waitcnt     vmcnt(0)                                    // 00000264: BF8C0F70
  v_cvt_f64_f32  v[3:4], v8                                 // 00000268: 7E062108
  v_add_f64     v[1:2], v[3:4], v[1:2]                      // 0000026C: D2C80001 00020303
  v_cvt_f32_f64  v1, v[1:2]                                 // 00000274: 7E021F01
  tbuffer_store_format_x  v1, v0, s[16:19], 0 offen format:[BUF_DATA_FORMAT_32,BUF_NUM_FORMAT_FLOAT] // 00000278: EBA41000 80040100
label_00A0:
  s_endpgm                                                  // 00000280: BF810000
end

; ----------------- CS Data ------------------------

codeLenInByte        = 644 bytes;

userElementCount     = 3;
;  userElements[0]      = PTR_UAV_TABLE, Element=1 dwords, s[2:3]
;  userElements[1]      = IMM_CONST_BUFFER 0, s[4:7]
;  userElements[2]      = IMM_CONST_BUFFER 1, s[8:11]
extUserElementCount  = 0;
NumVgprs             = 9;
NumSgprs             = 32;
FloatMode            = 192;
IeeeMode             = 0;
FlatPtr32            = 0;
ScratchSize          = 0 dwords/thread;
LDSByteSize          = 0 bytes/workgroup (compile time only);
ScratchWaveOffsetReg = s0;
; texSamplerUsage         = 0x00000000
; constBufUsage           = 0x00000000

;COMPUTE_PGM_RSRC2       = 0x00000098
COMPUTE_PGM_RSRC2:USER_SGPR      = 12
COMPUTE_PGM_RSRC2:TGID_X_EN      = 1
NumThreadX                       = 256

